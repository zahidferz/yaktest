
# Node.js with Vue
# Build a Node.js project that uses Vue.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
# Note that the trigger is ignored and overriden by Azure Pipelines options
resources:
  repositories:
  - repository: yaktest # The name used to reference this repository in the checkout step
    type: github
    endpoint: za
    name: zahidferz/yaktest
    ref: $(Build.SourceBranchName)

  - repository: gx-yak-tests # The name used to reference this repository in the checkout step
    type: github
    endpoint: gx-github
    name: gestionix/gx-yak-tests

name: $(SourceBranchName)
pool:
  vmImage: 'Ubuntu-16.04'

jobs:

  - job: GetVersion
    displayName: Get Version

    steps:
      - bash: |
          VERSIONT=$(jq -r .version package.json)
          echo "##vso[task.setvariable variable=version;isOutput=true]$VERSIONT"
        name: App

  - job: Setup
    displayName: Setup
    dependsOn: GetVersion
    variables:
      appVersion: $[ dependencies.GetVersion.outputs['App.version'] ]
      buildIncrement: $[counter(variables['appVersion'], 0)] # create a counter that is used to increment build run for same app version
      buildVersion: '$(appVersion)-r$(buildIncrement)'

    steps:
      - bash: echo "##vso[build.updatebuildnumber]$(buildVersion)" # Update build number in Pipeline UI
        displayName: Update build number

      - checkout: gx-yak-tests
      - checkout: yaktest

      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Install Node.js'

      - script: |
          sudo -- sh -c -e "echo '127.0.0.1 dev.local' >> /etc/hosts";
          cp -a $(System.DefaultWorkingDirectory)/gx-yak-tests/cypress/integration/.  $(System.DefaultWorkingDirectory)/yaktest/tests/e2e/specs
          cp -a $(System.DefaultWorkingDirectory)/gx-yak-tests/cypress/plugins/. $(System.DefaultWorkingDirectory)/yaktest/tests/e2e/plugins
          cp -a $(System.DefaultWorkingDirectory)/gx-yak-tests/cypress/fixtures/. $(System.DefaultWorkingDirectory)/yaktest/tests/e2e/fixtures
          cp -a $(System.DefaultWorkingDirectory)/gx-yak-tests/cypress/support/. $(System.DefaultWorkingDirectory)/yaktest/tests/e2e/support
          cp -a $(System.DefaultWorkingDirectory)/gx-yak-tests/cypress.env.json $(System.DefaultWorkingDirectory)/yaktest/
        displayName: 'Setting up Cypress'

      - task: Cache@2
        inputs:
          key: 'npm | $(Agent.OS) | $(System.DefaultWorkingDirectory)/yaktest/package-lock.json'
          path: '/home/vsts/.npm'
          restoreKeys: 'npm | $(Agent.OS) | $(System.DefaultWorkingDirectory)/yaktest/package-lock.json'
        displayName: Cache npm

      - task: Cache@2
        inputs:
          key: 'cypress | $(Agent.OS) | $(System.DefaultWorkingDirectory)/yaktest/package-lock.json'
          path: /home/vsts/.cache/Cypress
          restoreKeys: 'cypress | $(Agent.OS) | $(System.DefaultWorkingDirectory)/yaktest/package-lock.json'
        displayName: Cache Cypress binary

      - script: |
          npm ci
        displayName: 'Install dependencies'
        workingDirectory: $(System.DefaultWorkingDirectory)/yaktest/
      
      - task: Bash@3
        inputs:
          filePath: '$(System.DefaultWorkingDirectory)/yaktest/ciserver.sh'
          workingDirectory: '$(System.DefaultWorkingDirectory)/yaktest/'
        displayName: 'Start CI Server'
        name: CIServer
      - script: echo $(CIServer.IPVar)
        displayName: "Echo CI Sever"
        

  - job: Test
    strategy:
      parallel: 3
    displayName: Test 
    dependsOn: Setup
    variables:
      IPServer: $[ dependencies.Setup.Outputs['CIServer.IPVar'] ]

    steps:
      - script: echo $(IPServer)
        displayName: "Echo CI Sever on Test"

          
    

#      - script: |
#          npm run test:unit
#        displayName: 'Run tests unit'
#        env:
#          VUE_APP_ACC_PROV_URL_CLIENT_ID: $(VUE_APP_ACC_PROV_URL_CLIENT_ID)
#          VUE_APP_ACC_PROV_URL_CLIENT_SECRET: $(VUE_APP_ACC_PROV_URL_CLIENT_SECRET)
#          VUE_APP_AUTH0_CLIENT_ID: $(VUE_APP_AUTH0_CLIENT_ID)
#          VUE_APP_AUTH_URL_APP_ID: $(VUE_APP_AUTH_URL_APP_ID)
#          VUE_APP_AUTH_URL_CLIENT_ID: $(VUE_APP_AUTH_URL_CLIENT_ID)
#          VUE_APP_AUTH_URL_APP_SECRET: $(VUE_APP_AUTH_URL_APP_SECRET)
#          VUE_APP_INTERCOM: $(VUE_APP_INTERCOM)
#        workingDirectory: $(System.DefaultWorkingDirectory)/yaktest/
#
#      - script: |
#          npx cypress run --spec "tests/e2e/specs/Desktop/*" --reporter-options mochaFile=results/Desktop_Results.xml --record --parallel --ci-build-id $(buildVersion) --group "Desktop" --tag $(STAGE)
#          npx cypress run --spec "tests/e2e/specs/Mobile/*" --reporter-options mochaFile=results/Mobile_Results.xml --record --parallel --ci-build-id $(buildVersion) --group "Mobile" --tag $(STAGE)
#        displayName: 'Run tests e2e'
#        env:
#          VUE_APP_ACC_PROV_URL_CLIENT_ID: $(VUE_APP_ACC_PROV_URL_CLIENT_ID)
#          VUE_APP_ACC_PROV_URL_CLIENT_SECRET: $(VUE_APP_ACC_PROV_URL_CLIENT_SECRET)
#          VUE_APP_AUTH0_CLIENT_ID: $(VUE_APP_AUTH0_CLIENT_ID)
#          VUE_APP_AUTH_URL_APP_ID: $(VUE_APP_AUTH_URL_APP_ID)
#          VUE_APP_AUTH_URL_CLIENT_ID: $(VUE_APP_AUTH_URL_CLIENT_ID)
#          VUE_APP_AUTH_URL_APP_SECRET: $(VUE_APP_AUTH_URL_APP_SECRET)
#          VUE_APP_INTERCOM: $(VUE_APP_INTERCOM)
#          CYPRESS_HOST: $(CYPRESS_HOST)
#        timeoutInMinutes: 15
#        workingDirectory: $(System.DefaultWorkingDirectory)/yaktest/
#        continueOnError: true


